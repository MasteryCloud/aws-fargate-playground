---
AWSTemplateFormatVersion: 2010-09-09
Description: Service Resources

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id

  LoadBalancerPort:
    Type: String

  ContainerPort:
    Type: Number

  HostPort:
    Type: Number

  ApplicationProtocol:
    Type: String

  LoadBalancerArn:
    Type: String

  SslCertificateArn:
    Type: String

  DockerImage:
    Type: String

  DesiredCount:
    Type: Number

  LoadBalancerSecurityGroupId:
    Type: String

  SubnetA:
    Type: AWS::EC2::Subnet::Id

  SubnetB:
    Type: AWS::EC2::Subnet::Id

Resources:

  # TODO: -> Cluster
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref AWS::StackName

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: "/${AWS::StackName}/application-logs"
      RetentionInDays: 7

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 7
      HealthyThresholdCount: 2
      Port: !Ref HostPort
      Protocol: !Ref ApplicationProtocol
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "20"
        # - Key: stickiness.enabled
        #   Value: "true"
        # - Key: stickiness.type
        #   Value: lb_cookie
        # - Key: stickiness.lb_cookie.duration_seconds
        #   Value: "86400"
      TargetType: ip
      VpcId: !Ref VpcId

  ListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancerArn
      Port: !Ref LoadBalancerPort
      Protocol: HTTPS
      SslPolicy: 'ELBSecurityPolicy-TLS-1-2-Ext-2018-06'
      Certificates:
        - CertificateArn: !Ref SslCertificateArn

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref AWS::StackName
      NetworkMode: awsvpc
      RequiresCompatibilities: [ FARGATE ]
      Cpu: "2048"
      Memory: 4GB
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      ContainerDefinitions:
        -
          Name: !Ref AWS::StackName
          Image: !Ref DockerImage
          Memory: 4096
          PortMappings:
            -
              ContainerPort: !Ref ContainerPort
              HostPort: !Ref HostPort
              Protocol: tcp
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: !Ref AWS::StackName
          Environment: []

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns: []
      Policies: []

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Controls access to containers
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        -
          Description: Ingress from public ALB
          IpProtocol: -1
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroupId

  ContainerSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:  
      Description: Ingress from other containers in the same security group
      GroupId: !Ref ContainerSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref ContainerSecurityGroup

  Service:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref Cluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: !Ref DesiredCount
      HealthCheckGracePeriodSeconds: 300
      LaunchType: FARGATE
      LoadBalancers:
        -
          ContainerName: !Ref AWS::StackName
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup
      TaskDefinition: !Ref TaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref SubnetA
            - !Ref SubnetB
          SecurityGroups:
            - !Ref ContainerSecurityGroup

Outputs: {}