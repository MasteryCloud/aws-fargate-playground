---
AWSTemplateFormatVersion: 2010-09-09
Description: Service Resources

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id

  LoadBalancerPort:
    Type: String

  ContainerPort:
    Type: Number

  HostPort:
    Type: Number

  ApplicationProtocol:
    Type: String

  LoadBalancerArn:
    Type: String

  SslCertificateArn:
    Type: String

  DockerImage:
    Type: String

  DesiredCount:
    Type: Number

  LoadBalancerSecurityGroupId:
    Type: String

  SubnetA:
    Type: AWS::EC2::Subnet::Id

  SubnetB:
    Type: AWS::EC2::Subnet::Id

  MinCapacity:
    Description: Autoscaling min capacity
    Type: Number

  MaxCapacity:
    Description: Autoscaling max capacity
    Type: Number

  Cpu:
    Description: The number of cpu units used by the ECS tasks
    Type: Number

  Memory:
    Description: The amount (in MiB) of memory used by the tasks
    Type: Number

  CpuTargetValueForScaling:
    Description: Average cpu utilization in per cent used for auto scaling
    Type: Number

Resources:

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref AWS::StackName

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: "/${AWS::StackName}/application-logs"
      RetentionInDays: 7

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 7
      HealthyThresholdCount: 2
      Port: !Ref HostPort
      Protocol: !Ref ApplicationProtocol
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "20"
      TargetType: ip
      VpcId: !Ref VpcId

  ListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancerArn
      Port: !Ref LoadBalancerPort
      Protocol: HTTPS
      SslPolicy: 'ELBSecurityPolicy-TLS-1-2-Ext-2018-06'
      Certificates:
        - CertificateArn: !Ref SslCertificateArn

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref AWS::StackName
      NetworkMode: awsvpc
      RequiresCompatibilities: [ FARGATE ]
      Cpu: !Ref Cpu
      Memory: !Ref Memory
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      ContainerDefinitions:
        -
          Name: !Ref AWS::StackName
          Image: !Ref DockerImage
          PortMappings:
            -
              ContainerPort: !Ref ContainerPort
              HostPort: !Ref HostPort
              Protocol: tcp
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: !Ref AWS::StackName
          Environment: []

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns: []
      Policies: []

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Controls access to containers
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        -
          IpProtocol: tcp
          FromPort: !Ref HostPort
          ToPort: !Ref HostPort
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroupId

  Service:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref Cluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: !Ref DesiredCount
      HealthCheckGracePeriodSeconds: 300
      LaunchType: FARGATE
      LoadBalancers:
        -
          ContainerName: !Ref AWS::StackName
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup
      TaskDefinition: !Ref TaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref SubnetA
            - !Ref SubnetB
          SecurityGroups:
            - !Ref ContainerSecurityGroup

  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref MinCapacity
      MaxCapacity: !Ref MaxCapacity
      ResourceId: !Sub "service/${Cluster}/${Service.Name}"
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt AutoScalingRole.Arn

  AutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub "${AWS::StackName}-AutoScalingPolicy"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 10
        ScaleOutCooldown: 10
        TargetValue: !Ref CpuTargetValueForScaling

  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole

Outputs:

  ClusterName:
    Description: The ECS cluster name
    Value: !Ref Cluster
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-ClusterName"

  ServiceName:
    Description: The ECS service name
    Value: !GetAtt Service.Name
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-ServiceName"
